{"version":3,"sources":["Apple.js"],"names":["Apple","require","exports","req","res","regeneratorRuntime","async","_context","prev","next","awrap","find","theapples","sent","Apple_list","t0","send","concat","status","stop","Apple_detail","_context2","params","id","findById","result","Apple_update_put","toUpdate","_result","_context3","console","log","JSON","stringify","body","Apple_colour","Apple_price","Apple_quantity","save","Apple_create_post","document","_result2","_context4","Apple_delete","_context5","findByIdAndDelete","Apples_view_all_Page","_context6","render","title","results","Apple_create_Page","err","Apple_update_Page","_result3","_context7","query","toShow","_context8","Apple_view_one_Page","_context9"],"mappings":"aAAA,IAAIA,MAAQC,QAAQ,mBAApBC,QAAIF,WAAgB,SAADG,EACnBC,GADoB,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAIMV,MAAMW,QAJZ,KAAA,EAIZC,UAJYL,EAAAM,KAEZC,EAAAA,KAAAA,WAFYP,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAECH,EAAAY,KAAA,aAAAC,OAAAV,EAAAQ,GAAA,MAAAX,EAAAc,OAAA,KAFD,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAECjB,QAAAkB,aAAA,SAAAjB,EAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAe,GAAA,OAAA,OAAAA,EAAAb,KAAAa,EAAAZ,MAAA,KAAA,EAAA,OAEbG,QAAAA,IAAAA,SAFaT,EAAAmB,OAAAC,IAAAF,EAAAb,KAAA,EAAAa,EAAAZ,KAAA,EAAAJ,mBAAAK,MAAAV,MAAAwB,SAAArB,EAAAmB,OAAAC,KAAA,KAAA,EAAAE,OAAAJ,EAAAR,KAAAT,EAAAY,KAAAS,QAAAJ,EAAAZ,KAAA,GAAA,MAAA,KAAA,EAAAY,EAAAb,KAAA,EAAAa,EAAAN,GAAAM,EAAA,MAAA,GAAAjB,EAAAc,OAAA,KAAAd,EAAAY,KAAA,6BAAAC,OAAAd,EAAAmB,OAAAC,GAAA,eAAA,KAAA,GAAA,IAAA,MAAA,OAAAF,EAAAF,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAAAjB,QAAAwB,iBAAA,SAAAvB,EAAAC,GAAA,IAAAuB,EAAAC,EAAA,OAAAvB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAqB,QAAAC,IAAA,gBAAAd,OAAAd,EAAAmB,OAAAC,GAAA,eAAAN,OAAAe,KAAAC,UAAA9B,EAAA+B,QAAAL,EAAArB,KAAA,EAAAqB,EAAApB,KAAA,EAAAJ,mBAAAK,MAAAV,MAAAwB,SAAArB,EAAAmB,OAAAC,KAAA,KAAA,EAAA,OAAAI,EAAAE,EAAAhB,KAAAV,EAAA+B,KAAAC,eAAAR,EAAAQ,aAAAhC,EAAA+B,KAAAC,cAUrBhC,EAAA+B,KAAAE,cAAAT,EAAAS,YAAAjC,EAAA+B,KAAAE,aACAjC,EAAA+B,KAAAG,iBAAAV,EAAAU,eAAAlC,EAAA+B,KAAAG,gBAXqBR,EAAApB,KAAA,GAAAJ,mBAAAK,MAgCMiB,EAASW,QAhCf,KAAA,GAgCTb,EAhCSI,EAAAhB,KAiCbiB,QAAQC,IAAI,WAAaN,GArBzBL,EAAAA,KAAAA,GAZaS,EAAApB,KAAA,GAAA,MAAA,KAAA,GAAAoB,EAAArB,KAAA,GAAAqB,EAAAd,GAAAc,EAAA,MAAA,GAYEzB,EAAAc,OAAA,KAAAd,EAAAY,KAAA,aAAAC,OAAAY,EAAAd,GAAA,oBAAAE,OAAAd,EAAAmB,OAAAC,GAAA,YAZF,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAV,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA2CrBjB,QAAQqC,kBAAoB,SAAgBpC,EAAKC,GAArB,IAAAoC,EAAAC,EAAA,OAAApC,mBAAAC,MAAA,SAAAoC,GAAA,OAAA,OAAAA,EAAAlC,KAAAkC,EAAAjC,MAAA,KAAA,EAAA,OA/BLqB,QAAAC,IAAA5B,EAAA+B,MA+BKQ,EAAAlC,KAAA,GA3BpBJ,EAASqB,IAATzB,OAJemC,aAAAhC,EAAA+B,KAAAC,aAqCfK,EAASJ,YAAcjC,EAAI+B,KAAKE,YArCjBI,EAAAH,eAAAlC,EAAA+B,KAAAG,eA+BKK,EAAAjC,KAAA,EAAAJ,mBAAAK,MA/BL8B,EAAAF,QA+BK,KAAA,EA/BLb,EA+BKiB,EAAA7B,KAzBpBT,EAAAA,KAAIc,GAyBgBwB,EAAAjC,KAAA,GAAA,MAAA,KAAA,GAAAiC,EAAAlC,KAAA,GAAAkC,EAAA3B,GAAA2B,EAAA,MAAA,GA/BLtC,EAAAY,KAAA0B,EAAA3B,IAAAX,EAAAc,OAAA,KA+BK,KAAA,GAAA,IAAA,MAAA,OAAAwB,EAAAvB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA/BLjB,QAAAyC,aAAA,SAAAxC,EAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAsC,GAAA,OAAA,OAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,KAAA,EAAA,OAWvBqB,QAAAC,IAAA,UAAA5B,EAAAmB,OAAAC,IAXuBqB,EAAApC,KAAA,EAAAoC,EAAAnC,KAAA,EAAAJ,mBAAAK,MAoDAV,MAAM6C,kBAAkB1C,EAAImB,OAAOC,KApDnC,KAAA,EAoDfE,OApDemB,EAAA/B,KAYfa,QAAAA,IAAAA,WAAmBD,QAAArB,EAAAY,KAAAS,QAZJmB,EAAAnC,KAAA,GAAA,MAAA,KAAA,EAAAmC,EAAApC,KAAA,EAAAoC,EAAA7B,GAAA6B,EAAA,MAAA,GAYIxC,EAAAc,OAAA,KAAAd,EAAAY,KAAA,4BAAAC,OAAA2B,EAAA7B,GAAA,MAZJ,KAAA,GAAA,IAAA,MAAA,OAAA6B,EAAAzB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAgEvBjB,QAAQ4C,qBAAuB,SAAgB3C,EAAKC,GAArB,OAAAC,mBAAAC,MAAA,SAAAyC,GAAA,OAAA,OAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,KAAA,EAAA,OAAAsC,EAAAvC,KAAA,EAAAuC,EAAAtC,KAAA,EAAAJ,mBAAAK,MApDJV,MAAAW,QAoDI,KAAA,EAjDnBgB,UAiDmBoB,EAAAlC,KAhDvBT,EAAA4C,OAAA,SAAA,CACAC,MAAQf,uBACRgB,QAAQhB,YA8Cea,EAAAtC,KAAA,GAAA,MAAA,KAAA,EAAAsC,EAAAvC,KAAA,EAAAuC,EAAAhC,GAAAgC,EAAA,MAAA,GApDJ3C,EAAAY,KAAA,aAAAC,OAAA8B,EAAAhC,GAAA,MA6DnBX,EAAIc,OAAO,KATY,KAAA,GAAA,IAAA,MAAA,OAAA6B,EAAA5B,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAgB/BjB,QAAQiD,kBAAoB,SAAUhD,EAAKC,GApEhB0B,QAAAC,IAAA,eAAA,IAAA3B,EAAA4C,OAAA,cAAA,CAYnB5C,MAAIc,iBA8DN,MAAOkC,GA1EchD,EAAAc,OAAA,KAAAd,EAAAY,KAAA,cAAAC,OAAAmC,EAAA,SAAAlD,QAkB3BmD,kBAAA,SAAAlD,EAAAC,GAAA,IAAAkD,EAAA,OAAAjD,mBAAAC,MAAA,SAAAiD,GAAA,OAAA,OAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,KAAA,EAAA,OAgEIqB,QAAQC,IAAI,wBAA0B5B,EAAIqD,MAAMjC,IAhEpDgC,EAAA/C,KAAA,EAAA+C,EAAA9C,KAAA,EAAAJ,mBAAAK,MACAV,MAA4BwB,SAAArB,EAAgBA,MAAKC,KADjD,KAAA,EACQmC,EADRgB,EAAA1C,KAC4BT,EAAA4C,OAAA,cAAA,CAmEhBC,MAAO,eAnESQ,OAAAhC,IAD5B8B,EAAA9C,KAAA,GAAA,MAAA,KAAA,EAAA8C,EAAA/C,KAAA,EAAA+C,EAAAxC,GAAAwC,EAAA,MAAA,GAC4BnD,EAAAc,OAAA,KACxBY,EAAAA,KAAAA,cAAAA,OAAAA,EAAAA,GAAAA,OAFJ,KAAA,GAAA,IAAA,MAAA,OAAAyB,EAAApC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAOQqB,QAAAA,kBAASJ,SAAuBA,EAAAA,GAAvBA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OACTI,QAAAA,IAAAA,sBAA8BN,EAAJsB,MAASnB,IAD1BD,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MANWpC,MAAAwB,SAAArB,EASDqC,MAAAA,KAHVJ,KAAAA,EANWX,OAMXW,EAAAA,KA0EThC,EAAI4C,OAAO,cAAe,CAhFNC,MAAA,eAShBxB,OATgBA,SAMXW,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GANWhC,EAAAc,OAAA,KAsFpBd,EAAIY,KAAJ,cAAAC,OAAAyC,EAAA3C,GAAA,OAhFSqB,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,MAMTlC,QAAAyD,oBAAA,SAAAxD,EAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAsD,GAAA,OAAA,OAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,KAAA,EAAA,OACAL,QAAAA,IAAIY,sBAAJb,EAAAqD,MAAAjC,IADAqC,EAAApD,KAAA,EAAAoD,EAAAnD,KAAA,EAAAJ,mBAAAK,MAiFeV,MAAMwB,SAAUrB,EAAIqD,MAAMjC,KAjFzC,KAAA,EAiFAE,OAjFAmC,EAAA/C,KAZoBT,EAAA4C,OAAA,cAAA,CAAAC,MAAA,eAAAQ,OAAAhC,SAYpBmC,EAAAnD,KAAA,GAAA,MAAA,KAAA,EAAAmD,EAAApD,KAAA,EAAAoD,EAAA7C,GAAA6C,EAAA,MAAA,GAZoBxD,EAAAc,OAAA,KAAAd,EAAAY,KAAA,cAAAC,OAAA2C,EAAA7C,GAAA,OAYpB,KAAA,GAAA,IAAA,MAAA,OAAA6C,EAAAzC,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"Apple.min.js","sourcesContent":["var Apple = require('../models/Apple');\r\n// List of all Apples\r\nexports.Apple_list = async function (req, res) {\r\n    try {\r\n        theapples = await Apple.find();\r\n        res.send(theapples);\r\n    } catch (err) {\r\n        res.send(`{\"error\": ${err}}`)\r\n        res.status(500);\r\n    }\r\n};\r\n\r\n// for a specific Apples.\r\n// for a specific Apples.\r\nexports.Apple_detail = async function (req, res) {\r\n    console.log(\"detail\" + req.params.id)\r\n    try {\r\n        result = await Apple.findById(req.params.id)\r\n        res.send(result)\r\n    } catch (error) {\r\n        res.status(500)\r\n        res.send(`{\"error\": document for id ${req.params.id} not found`);\r\n    }\r\n};\r\n\r\n// Handle Apples update form on PUT.\r\nexports.Apple_update_put = async function (req, res) {\r\n    console.log(`update on id ${req.params.id} with body ${JSON.stringify(req.body)}`)\r\n    try {\r\n        let toUpdate = await Apple.findById(req.params.id)\r\n        // Do updates of properties\r\n        if (req.body.Apple_colour) toUpdate.Apple_colour = req.body.Apple_colour;\r\n        if (req.body.Apple_price) toUpdate.Apple_price = req.body.Apple_price;\r\n        if (req.body.Apple_quantity) toUpdate.Apple_quantity = req.body.Apple_quantity;\r\n        let result = await toUpdate.save();\r\n        console.log(\"Success \" + result)\r\n        res.send(result)\r\n    } catch (err) {\r\n        res.status(500)\r\n        res.send(`{\"error\": ${err}: Update for id ${req.params.id} failed`);\r\n    }\r\n};\r\n\r\n\r\n// Handle Apples create on POST.\r\nexports.Apple_create_post = async function (req, res) {\r\n    console.log(req.body)\r\n    try {\r\n        let document = new Apple();\r\n        \r\n        document.Apple_colour = req.body.Apple_colour;\r\n        document.Apple_price = req.body.Apple_price;\r\n        document.Apple_quantity = req.body.Apple_quantity;\r\n\r\n        let result = await document.save();\r\n        res.send(result);\r\n    } catch (err) {\r\n        // console.log(err);\r\n        res.send(err)\r\n        res.status(500);\r\n    }\r\n};\r\n// Handle Apples delete on DELETE.\r\nexports.Apple_delete = async function (req, res) {\r\n    console.log(\"delete \" + req.params.id)\r\n    try {\r\n        result = await Apple.findByIdAndDelete(req.params.id)\r\n        console.log(\"Removed \" + result)\r\n        res.send(result)\r\n    } catch (err) {\r\n        res.status(500)\r\n        res.send(`{\"error\": Error deleting ${err}}`);\r\n    }\r\n};\r\n\r\n\r\n// VIEWS\r\n// Handle a show all view\r\nexports.Apples_view_all_Page = async function (req, res) {\r\n    try {\r\n        theApples = await Apple.find();\r\n        res.render('Apples', {\r\n            title: 'Apple Search Results',\r\n            results: theApples\r\n        });\r\n    } catch (err) {\r\n        res.send(`{\"error\": ${err}}`)\r\n        res.status(500);\r\n    }\r\n};\r\n\r\n// Handle building the view for creating a Apple.\r\n// No body, no in path parameter, no query.\r\n// Does not need to be async\r\nexports.Apple_create_Page = function (req, res) {\r\n    console.log(\"create view\")\r\n    try {\r\n        res.render('Applecreate', {\r\n            title: 'Apple Create'\r\n        });\r\n    } catch (err) {\r\n        res.status(500)\r\n        res.send(`{'error': '${err}'}`);\r\n    }\r\n};\r\n// Handle building the view for updating a Apples.\r\n// query provides the id\r\nexports.Apple_update_Page = async function (req, res) {\r\n    console.log(\"update view for item \" + req.query.id)\r\n    try {\r\n        let result = await Apple.findById(req.query.id)\r\n        res.render('Appleupdate', {\r\n            title: 'Apple Update',\r\n            toShow: result\r\n        });\r\n    } catch (err) {\r\n        res.status(500)\r\n        res.send(`{'error': '${err}'}`);\r\n    }\r\n};\r\n// Handle a delete one view with id from query\r\nexports.Apple_delete_Page = async function (req, res) {\r\n    console.log(\"Delete view for id \" + req.query.id)\r\n    try {\r\n        result = await Apple.findById(req.query.id)\r\n        res.render('Appledelete', {\r\n            title: 'Apple Delete',\r\n            toShow: result\r\n        });\r\n    } catch (err) {\r\n        res.status(500)\r\n        res.send(`{'error': '${err}'}`);\r\n    }\r\n};\r\n// Handle a show one view with id specified by query \r\nexports.Apple_view_one_Page = async function(req, res) { \r\n    console.log(\"single view for id \"  + req.query.id) \r\n    try{ \r\n        result = await Apple.findById( req.query.id) \r\n        res.render('Appledetail',  \r\n{ title: 'Apple Detail', toShow: result }); \r\n    } \r\n    catch(err){ \r\n        res.status(500) \r\n        res.send(`{'error': '${err}'}`); \r\n    } \r\n}; \r\n\r\n \r\n\r\n"]}