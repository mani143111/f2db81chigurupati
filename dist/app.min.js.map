{"version":3,"sources":["app.js"],"names":["express","require","path","mongoose","mongodb","cookieParser","logger","Apple","process","connectionString","connect","useUnifiedTopology","on","console","db","connection","error","bind","once","log","indexRouter","set","use","urlencoded","app","Apple_colour","instance1","instance2","Apple_quantity","Apple_price","err","doc","instance3","save","recreateDB","__dirname","usersRouter","json","resourceRouter","join","AppleRouter","gridbuildRouter","selectorRouter","reseed","res","locals","req","next","createError","module","exports","message","get","status","render"],"mappings":"aAAA,IAAIA,QAAUC,QAAQ,WAAlBD,KAAOC,QAAGA,QAEVC,SAAOD,QAAQ,YAEfE,QAAQF,QAAU,WAElBG,aAAUH,QAAQ,iBAElBI,OAAAA,QAAeJ,UAEfK,MAAML,QAAU,kBAEpBA,QAAIM,UAAQN,SAEZA,IAAAA,iBAEAO,QAAMC,IAAAA,WAMNN,SAASO,QAAQD,aAMbE,QAAAA,iBAIJ,CAIGC,iBAAYC,EAIbA,oBAAY,IARd,IAAIC,GAAKX,SAASY,WAIlBD,GAAGF,GAAG,QAASC,QAAQG,MAAMC,KAAKJ,QAAS,6BAE3CC,GAAGI,KAAK,OAAQ,WAEdL,QAAQM,IAAI,gCAId,IAAIC,YAAcnB,QAAQ,kBAUtBoB,YAAanB,QAAA,kBACbmB,YAAIpB,QAAe,kBAEnBqB,gBAAJrB,QAAA,sBACIqB,eAAIrB,QAAR,qBACIqB,eAAYC,QAAW,qBAA3BC,IAAAxB,UAqBQyB,SAAAA,aAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MAENC,MAAAA,cAFMD,KAAAA,EAMNZ,IAIIc,MAAAA,CAAAA,aAlBN,MAoBEpB,YAAM,KAAAqB,eAAA,MAAuBC,KAAAA,SAAYC,EAAnCC,GAAA,GAAAD,EAAA,OApBRjB,QAAAG,MAAAc,GAwBGjB,QAAAM,IAAA,+BAQOM,IAAwCG,MAAAA,CAAAA,aAAAA,QAAeC,YAAA,MAAAD,eAAA,MAE7DI,KAAS,SAAOF,EAAAC,GAIhBlB,GAAAA,EAAAA,OAAAA,QAAYG,MAAAc,GAZbjB,QAAQM,IAAI,gCA1Bf,IAAAZ,MAAA,CAAAkB,aAAA,SAAAI,YAAA,KAAAD,eAAA,MAkCcK,KAAM,SAASH,EAAIC,GAE7B,GAAGD,EAAK,OAAOjB,QAAQG,MAAMc,GAUlBI,QAAUf,IAAA,+BAtCjBM,KAAAA,EAAAA,IAAAA,MAAAA,OAAAA,EAAAA,UAjBRD,IAAIF,IAAI,QAAKF,KAAAA,KAAbe,UAAA,UACAX,IAAIF,IAAI,cAAUc,OAElBZ,IAAIF,IAAIhB,OAAA,QACRkB,IAAIF,IAAItB,QAAAqC,QACRb,IAAIF,IAAItB,QAAAuB,WAAae,CAAAA,UAErB,KAVAd,IAAIF,IAAIjB,gBAYRmB,IAAAF,IAAAtB,QAAekC,OAAfhC,KAAAqC,KAAAJ,UAAA,YAAAX,IAAAF,IAAA,IAAAF,aAAAI,IAAAF,IAAA,SAAAc,aAAAZ,IAAAF,IAAA,SAAAkB,aAAAhB,IAAAF,IAAA,aAAAmB,iBAAAjB,IAAAF,IAAA,YAAAoB,gBAAAlB,IAAAF,IAAA,YAAAgB,gBAiDA,IAIAK,QAAA,EACIrB,QAAIY,aAGNU,IAAAA,IAAIC,SAAO7B,EAAQ8B,EAAItB,GAPvBuB,EAAKC,YAAY,QAcnBC,IAAAA,IAAOC,SAAU1B,EAAjBsB,EAAAF,EAAAG,GAREH,EAAIC,OAAOM,QAAUrB,EAAIqB,QACzBP,EAAIC,OAAO7B,MAA+B,gBAAvB8B,EAAItB,IAAI4B,IAAI,OAA2BtB,EAAM,GAGhEc,EAAIS,OAAOvB,EAAIuB,QAAU,KACzBT,EAAIU,OAAO,WAGbL,OAAOC,QAAU1B","file":"app.min.js","sourcesContent":["var express = require('express');\r\n\r\nvar path = require('path');\r\n\r\nvar mongoose = require('mongoose')\r\n\r\nvar mongodb = require('mongodb')\r\n\r\nvar cookieParser = require('cookie-parser');\r\n\r\nvar logger = require('morgan');\r\n\r\nvar Apple = require(\"./models/Apple\");\r\n\r\nrequire('dotenv').config();\r\n\r\nconst connectionString =\r\n\r\n  process.env.MONGO_CON\r\n\r\nmongoose = require('mongoose');\r\n\r\nmongoose.connect(connectionString,\r\n\r\n  {\r\n\r\n    useNewUrlParser: true,\r\n\r\n    useUnifiedTopology: true\r\n\r\n  });\r\n\r\nvar db = mongoose.connection;\r\n\r\n//Bind connection to error event\r\n\r\ndb.on('error', console.error.bind(console, 'MongoDB connectionerror:'));\r\n\r\ndb.once(\"open\", function () {\r\n\r\n  console.log(\"Connection to DB succeeded\")\r\n\r\n});\r\n\r\nvar indexRouter = require('./routes/index');\r\nvar usersRouter = require('./routes/users');\r\nvar AppleRouter = require('./routes/Apple');\r\nvar gridbuildRouter = require('./routes/gridbuild');\r\nvar selectorRouter = require('./routes/selector');\r\nvar resourceRouter = require('./routes/resource');\r\n\r\nvar app = express();\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'pug');\r\n\r\napp.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\napp.use('/', indexRouter);\r\napp.use('/users', usersRouter);\r\napp.use('/Apple', AppleRouter);\r\napp.use('/gridbuild', gridbuildRouter);\r\napp.use('/selector', selectorRouter);\r\napp.use('/resource', resourceRouter);\r\n\r\n// We can seed the collection if needed on server start\r\n\r\nasync function recreateDB(){\r\n\r\n  // Delete everything\r\n \r\n  await Apple.deleteMany();\r\n \r\n  let instance1 = new\r\n \r\n Apple({Apple_colour:\"red\", Apple_price:'50',Apple_quantity:100.0});\r\n \r\n  instance1.save( function(err,doc) {\r\n \r\n  if(err) return console.error(err);\r\n \r\n  console.log(\"First Apple details saved\")\r\n \r\n  });\r\n \r\n  let instance2 = new\r\n \r\n  Apple({Apple_colour:\"green\", Apple_price:'120',Apple_quantity:200.0});\r\n \r\n   instance2.save( function(err,doc) {\r\n \r\n   if(err) return console.error(err);\r\n \r\n   console.log(\"Second Apple details saved\")\r\n \r\n   });\r\n \r\n   let instance3 = new\r\n \r\n   Apple({Apple_colour:\"purple\", Apple_price:'90',Apple_quantity:200.0});\r\n \r\n    instance3.save( function(err,doc) {\r\n \r\n    if(err) return console.error(err);\r\n \r\n    console.log(\"Third Apple details saved\")\r\n \r\n    });\r\n \r\n }\r\n \r\n let reseed = true;\r\n \r\n if (reseed) { recreateDB();}\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function(req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render('error');\r\n});\r\n\r\nmodule.exports = app;\r\n"]}